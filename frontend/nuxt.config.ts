// =============================================================================
// QR 자산관리 시스템 Nuxt.js 설정 파일
// =============================================================================
//
// 이 파일은 Nuxt.js 프레임워크의 설정을 담당합니다.
// 개발 환경과 운영 환경의 설정을 분리하여 관리하며,
// 빌드 최적화, 모듈 설정, 환경변수 등을 포함합니다.
//
// 주요 설정:
// - 개발 서버 포트 설정
// - 빌드 최적화 설정
// - CSS 프레임워크 (Tailwind CSS)
// - 상태 관리 (Pinia)
// - 환경별 API URL 설정
// - 보안 및 성능 최적화
//
// 작성일: 2025-01-27
// =============================================================================

// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  // 개발 도구 활성화 (개발 환경에서만 사용)
  devtools: { enabled: true },
  
  // =============================================================================
  // 개발 서버 설정
  // =============================================================================
  // 2024-12-19: NCP 서버 배포를 위해 포트를 3000으로 변경
  devServer: {
    port: 3000  // 프론트엔드 개발 서버 포트
  },
  
  // =============================================================================
  // Nitro 서버 설정 (Nuxt 3의 서버 엔진)
  // =============================================================================
  // 2025-01-27: nginx 없이 MIME 타입 문제 해결을 위한 설정 개선
  nitro: {
    storage: {
      redis: {
        driver: 'memory'  // 메모리 기반 스토리지 사용
      }
    },
    // 정적 파일 서빙 활성화
    static: true
  },
  
  // =============================================================================
  // 실험적 기능 설정
  // =============================================================================
  // 2024-12-19: 캐시 무효화를 위한 설정
  experimental: {
    payloadExtraction: false  // 페이로드 추출 비활성화로 캐시 문제 해결
  },
  
  // =============================================================================
  // CSS 설정
  // =============================================================================
  // 전역 CSS 파일 로드
  css: ['~/assets/css/main.css'],
  
  // =============================================================================
  // 모듈 설정
  // =============================================================================
  modules: [
    '@nuxtjs/tailwindcss',  // Tailwind CSS 프레임워크
    '@pinia/nuxt'           // Pinia 상태 관리
  ],
  
  // =============================================================================
  // 앱 헤더 설정
  // =============================================================================
  app: {
    head: {
      // 외부 리소스 (폰트 등) 사전 로드
      link: [
        {
          rel: 'preconnect',
          href: 'https://fonts.googleapis.com'
        },
        {
          rel: 'preconnect',
          href: 'https://fonts.gstatic.com',
          crossorigin: ''
        },
        {
          rel: 'stylesheet',
          href: 'https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap'
        }
      ]
    }
  },
  
  // =============================================================================
  // PostCSS 설정
  // =============================================================================
  // CSS 후처리 도구 설정
  postcss: {
    plugins: {
      tailwindcss: {},    // Tailwind CSS 처리
      autoprefixer: {},   // 벤더 프리픽스 자동 추가
    },
  },
  
  // =============================================================================
  // 런타임 설정 (환경변수)
  // =============================================================================
  // 2025-01-27: HTTPS 환경으로 API URL 설정 변경
  runtimeConfig: {
    public: {
      // =============================================================================
      // API 기본 URL 설정
      // =============================================================================
      // 개발 환경: localhost 사용
      // 운영 환경: HTTPS 도메인 사용 (2025-01-27: HTTPS로 변경)
      apiBase: process.env.NODE_ENV === 'production' 
        ? (process.env.API_BASE_URL || 'https://invenone.it.kr/api')  // HTTPS로 변경
        : (process.env.API_BASE_URL || 'http://localhost:4000/api'),  // 개발환경은 HTTP
      
      // =============================================================================
      // 환경 구분 플래그
      // =============================================================================
      // 환경별 기능 분기를 위한 플래그
      isProduction: process.env.NODE_ENV === 'production',
      isDevelopment: process.env.NODE_ENV === 'development',
      
      // =============================================================================
      // 디버그 모드 설정
      // =============================================================================
      // 환경별 디버그 모드 (운영 환경에서는 비활성화)
      debugMode: process.env.NODE_ENV !== 'production'
    }
  }
})